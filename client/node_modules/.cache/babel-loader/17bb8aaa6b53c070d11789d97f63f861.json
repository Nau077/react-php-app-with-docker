{"ast":null,"code":"var _jsxFileName = \"/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js\";\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport FormSelect from './delivery_form-select';\nimport FormUpload from './delivery_form-upload';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Yup from \"yup\";\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\nconst schema = Yup.object().shape({\n  weight: Yup.string(\"Введите ваш вес\").required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\").min(8, \"Адрес должен состоять минимум из 8 символов\").required(\"Адрес - обязательное поле\"),\n  date: Yup.string(\"Введите дату\").required(\"Дата - обязательное поле\").test(\"Формат\", \"Некорректный формат даты\", function (value) {\n    if (value === \"Invalid Date\") return false;\n    return true;\n  }).nullable(),\n  waterbase: Yup.string(\"\").required(\"Необходимо выбрать водобазу\")\n});\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: values.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }));\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nconst useStyles = makeStyles(theme => ({\n  card: {\n    minWidth: 275\n  },\n  button: {\n    color: blue[900],\n    margin: 10\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      minWidth: 240,\n      maxWidth: 450,\n      width: '100%',\n      textField: {\n        flexBasis: 200,\n        textField: {\n          marginLeft: theme.spacing(1),\n          marginRight: theme.spacing(1)\n        }\n      }\n    }\n  }\n}));\n\nfunction DeliveryForm(props) {\n  const [formState, setFormState] = useState({\n    values: {\n      rigion: '',\n      waterbase: '',\n      weight: '',\n      adress: '',\n      date: new Date(),\n      upload: ''\n    },\n    errors: {}\n  });\n  useEffect(() => {\n    setFormState(state => ({\n      values: { ...state.values,\n        rigion: props.rigionValue\n      },\n      errors: { ...state.errors\n      }\n    }));\n  }, [props]);\n\n  const handleChangeForm = async event => {\n    let {\n      target: {\n        name,\n        value\n      }\n    } = event;\n    let errors = await schema.validateAt(name, {\n      [name]: value\n    }, {\n      abortEarly: false\n    }).then(_ => ({\n      [name]: null\n    })).catch(convert);\n    setFormState(state => ({\n      values: { ...state.values,\n        [name]: value\n      },\n      errors: { ...state.errors,\n        ...errors\n      }\n    }));\n  };\n\n  const handleWeightChange = name => event => {\n    (async function errors() {\n      let errors = await schema.validateAt(name, {\n        [name]: event.target.value\n      }, {\n        abortEarly: false\n      }).then(_ => ({\n        [name]: null\n      })).catch(convert);\n      setFormState(state => ({\n        values: { ...state.values,\n          [name]: event.target.value\n        },\n        errors: { ...state.errors,\n          ...errors\n        }\n      }));\n    })();\n  };\n\n  const handleDateChange = name => value => {\n    (async function errors() {\n      let errors = await schema.validateAt(name, {\n        [name]: value\n      }, {\n        abortEarly: false\n      }).then(_ => ({\n        [name]: null\n      })).catch(convert);\n      setFormState(state => ({\n        values: { ...state.values,\n          [name]: value\n        },\n        errors: { ...state.errors,\n          ...errors\n        }\n      }));\n    })();\n  };\n\n  const handleSelectError = message => {\n    setFormState({\n      values: { ...formState.values,\n        waterbase: ''\n      },\n      errors: { ...formState.errors,\n        waterbase: message\n      }\n    }); //   (async function errors() {\n    //     let errors =  await schema.validateAt(waterbase, {waterbase : value}, { abortEarly : false })\n    //              .then(_ => ({[name]: null}))\n    //              .catch(convert)\n    //      setFormState( state => ({\n    //                  values: {...state.values, [name] : value},\n    //                  errors: {...state.errors, ...errors}\n    //                })\n    //              );\n    //  }())\n  };\n\n  const handleSelectChange = value => {\n    setFormState({\n      values: { ...formState.values,\n        waterbase: value\n      },\n      errors: { ...formState.errors\n      }\n    });\n  };\n\n  const handleUploadFile = value => {\n    setFormState({\n      values: { ...formState.values,\n        upload: value\n      },\n      errors: { ...formState.errors\n      }\n    });\n  };\n\n  const handleSubmit = callback => {\n    return async function (event) {\n      event.preventDefault();\n      let errors = await schema.validate(formState.values, {\n        abortEarly: false\n      }).then(_ => ({})) // сбрасывает объект ошибок состояния, если ошибок нет\n      .catch(convert);\n      setFormState(state => ({ ...state,\n        errors\n      }));\n\n      if (!errors) {\n        callback(formState.values);\n      }\n    };\n  };\n\n  const getError = (state, prop) => {\n    if (state.errors[prop]) return true;\n    return false;\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit(form => {\n      console.log(\"Success\", form);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, props.rigionValue ? /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"standard-required1\",\n    label: \"\\u0412\\u0430\\u0448 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D\",\n    className: classes.textField,\n    value: props.rigionValue,\n    InputProps: {\n      readOnly: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(FormSelect, {\n    handleSelectChange: handleSelectChange,\n    handleSelectError: handleSelectError,\n    name: formState.waterbase,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"weight\",\n    id: \"standard-required2\",\n    label: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043C\\u0430\\u0441\\u0441\\u0443 \\u0432\\u043E\\u0434\\u044B \\u0432 \\u0442\\u043E\\u043D\\u043D\\u0430\\u0445\",\n    className: classes.textField,\n    value: formState.values.weight,\n    onChange: handleWeightChange('weight'),\n    helperText: formState.errors.weight ? formState.errors.weight : \"\",\n    error: getError(formState, 'weight'),\n    InputProps: {\n      inputComponent: NumberFormatCustom,\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 35\n        }\n      }, \"T\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"adress\",\n    label: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0441\",\n    value: formState.values.adress,\n    onChange: handleChangeForm,\n    fullWidth: true,\n    error: getError(formState, 'adress'),\n    helperText: formState.errors.adress ? formState.errors.adress : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    disableToolbar: true,\n    variant: \"inline\",\n    format: \"MM/dd/yyyy\",\n    margin: \"normal\",\n    id: \"date-picker-inline\",\n    label: \"\\u0412\\u044B\\u0431\\u0435\\u0440\\u0438\\u0442\\u0435 \\u0434\\u0430\\u0442\\u0443\",\n    value: formState.values.date,\n    onChange: handleDateChange('date'),\n    helperText: formState.errors.date ? formState.errors.date : \"\",\n    error: getError(formState, 'date'),\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 14\n    }\n  })), /*#__PURE__*/React.createElement(FormUpload, {\n    handleUploadFile: handleUploadFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.button,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\")))));\n}\n\nlet convert = errors => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : { ...z,\n      [item.path]: item.message\n    };\n  }, {});\n};\n\nexport default DeliveryForm;","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js"],"names":["React","useState","useEffect","useCallback","useRef","FormSelect","FormUpload","TextField","makeStyles","InputAdornment","blue","CardContent","Button","Card","NumberFormat","PropTypes","DateFnsUtils","CircularProgress","Yup","MuiPickersUtilsProvider","KeyboardDatePicker","schema","object","shape","weight","string","required","adress","min","date","test","value","nullable","waterbase","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","propTypes","func","isRequired","useStyles","theme","card","minWidth","button","color","margin","root","spacing","maxWidth","width","textField","flexBasis","marginLeft","marginRight","DeliveryForm","formState","setFormState","rigion","Date","upload","errors","state","rigionValue","handleChangeForm","event","validateAt","abortEarly","then","_","catch","convert","handleWeightChange","handleDateChange","handleSelectError","message","handleSelectChange","handleUploadFile","handleSubmit","callback","preventDefault","validate","getError","prop","classes","form","console","log","readOnly","inputComponent","endAdornment","inner","reduce","z","item","path"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport FormSelect from './delivery_form-select'\nimport FormUpload from './delivery_form-upload'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Yup from \"yup\"\n\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\n\n\nconst schema = Yup.object().shape({\n  weight: Yup.string(\"Введите ваш вес\")\n  .required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\")\n  .min(8, \"Адрес должен состоять минимум из 8 символов\")\n  .required(\"Адрес - обязательное поле\"),\n  date: Yup.string(\"Введите дату\")\n  .required(\"Дата - обязательное поле\")\n  .test(\"Формат\", \"Некорректный формат даты\", \n    function(value) {\n      if (value === \"Invalid Date\") return false\n      return true\n    })\n  .nullable(),\n  waterbase: Yup.string(\"\")\n  .required(\"Необходимо выбрать водобазу\"),\n})\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n    return (\n      <NumberFormat\n        {...other}\n        getInputRef={inputRef}\n        onValueChange={values => {\n          onChange({\n            target: {\n              name: values.name,\n              value: values.value,\n            },\n          });\n        }}\n        isNumericString\n      />\n    );\n  }\n  \n  NumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n  \nconst useStyles = makeStyles((theme) => ({\n    card: {\n      minWidth: 275,\n    },\n    button: {\n      color: blue[900],\n      margin: 10\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        minWidth: 240,\n        maxWidth: 450,\n        width: '100%',\n        textField: {\n            flexBasis: 200,\n            textField: {\n                marginLeft: theme.spacing(1),\n                marginRight: theme.spacing(1),\n              },\n          },\n      },\n    },\n  }));\n\nfunction DeliveryForm(props) {\n \n\n    const [formState, setFormState] = useState({\n      values: {\n        rigion: '',\n        waterbase: '',\n        weight: '',\n        adress: '',\n        date: new Date(),\n        upload: ''\n      },\n      errors: {}\n    });\n\n      useEffect(() => {\n        setFormState(state => ({\n          values: {...state.values, rigion: props.rigionValue },\n          errors: {...state.errors }\n        }))\n      }, [props]);\n    \n      const handleChangeForm = async (event) => {\n \n        let {target : { name, value }} = event\n\n        let errors = await schema.validateAt(name, {[name] :value}, { abortEarly : false })\n          .then(_ => ({[name]: null}))\n          .catch(convert)\n        \n          setFormState(state => ({\n            values: {...state.values, [name]: value},\n            errors: {...state.errors, ...errors}\n          }))\n      };\n\n      const handleWeightChange = name =>  event => {\n        \n          (async function errors() {\n           let errors =  await schema.validateAt(name, {[name] : event.target.value}, { abortEarly : false })\n                    .then(_ => ({[name]: null}))\n                    .catch(convert)\n\n            setFormState( state => ({\n                        values: {...state.values, [name] : event.target.value},\n                        errors: {...state.errors, ...errors}\n                      })\n                );\n        }())\n       \n      };\n\n      const handleDateChange = name => value => {\n        \n        (async function errors() {\n         let errors =  await schema.validateAt(name, {[name] : value}, { abortEarly : false })\n                  .then(_ => ({[name]: null}))\n                  .catch(convert)\n\n          setFormState( state => ({\n                      values: {...state.values, [name] : value},\n                      errors: {...state.errors, ...errors}\n                    })\n                  );\n      }())\n     \n    };\n      const handleSelectError = (message) => {\n\n        setFormState({\n          values: {...formState.values, waterbase : '' },\n          errors: {...formState.errors, waterbase: message}\n         });\n\n      //   (async function errors() {\n      //     let errors =  await schema.validateAt(waterbase, {waterbase : value}, { abortEarly : false })\n      //              .then(_ => ({[name]: null}))\n      //              .catch(convert)\n \n      //      setFormState( state => ({\n      //                  values: {...state.values, [name] : value},\n      //                  errors: {...state.errors, ...errors}\n      //                })\n      //              );\n      //  }())\n      }\n      \n      const handleSelectChange = value => {\n        setFormState({\n             values: {...formState.values, waterbase : value },\n             errors: {...formState.errors}\n            });\n      };\n\n\n    const handleUploadFile = value => {\n        setFormState({\n          values: {...formState.values, upload : value },\n          errors: {...formState.errors}\n          });\n    };\n\n    const handleSubmit = (callback) => {\n     return async function (event) {\n       event.preventDefault();\n       \n       let errors = await schema.validate(formState.values, {abortEarly : false})\n          .then(_ => ({})) // сбрасывает объект ошибок состояния, если ошибок нет\n          .catch(convert)\n\n      setFormState(state => ({\n        ...state,\n        errors\n      }))\n\n      if (!errors) {\n        callback(formState.values)\n      }\n     }\n    }\n \n    const getError = (state, prop) => {\n      if (state.errors[prop]) return true\n      return false\n    }\n\n    const classes = useStyles();\n\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n        <div className=\"form-wrapper\">\n        <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit(form => {\n          console.log(\"Success\", form)\n        })}>\n             {props.rigionValue ? <TextField \n                required \n                id=\"standard-required1\" \n                label=\"Ваш регион\"\n                className={classes.textField}\n                value={props.rigionValue}\n                InputProps={{\n                    readOnly: true,\n                }}\n             />\n             : <CircularProgress />\n            }\n            <FormSelect handleSelectChange={handleSelectChange} handleSelectError={handleSelectError} name={formState.waterbase}/>\n            <TextField \n                name=\"weight\"\n                id=\"standard-required2\"\n                label=\"Напишите массу воды в тоннах\"\n                className={classes.textField}\n                value={formState.values.weight}\n                onChange={handleWeightChange('weight')}\n                helperText={formState.errors.weight ? formState.errors.weight : \"\"}\n                error={ getError(formState, 'weight')}\n                InputProps={{\n                    inputComponent: NumberFormatCustom,\n                    endAdornment: <InputAdornment position=\"end\">T</InputAdornment>,\n                  }}\n             />\n             <TextField\n                name=\"adress\"\n                label=\"Напишите адресс\"\n                value={formState.values.adress}\n                onChange={handleChangeForm}\n                fullWidth\n                error={ getError(formState, 'adress')}\n                helperText={formState.errors.adress ? formState.errors.adress : \"\"}\n             />\n             <MuiPickersUtilsProvider utils={DateFnsUtils}>\n             <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Выберите дату\"\n                value={formState.values.date}\n                onChange={handleDateChange('date')}\n                helperText={formState.errors.date ? formState.errors.date : \"\"} \n                error={ getError(formState, 'date')}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n            />\n            </MuiPickersUtilsProvider>\n            <FormUpload handleUploadFile={handleUploadFile}/>\n              <Button variant=\"outlined\" className={classes.button} type=\"submit\">\n                Отправить\n              </Button>\n         </form>\n         </div>\n         </CardContent>\n         </Card>\n    );\n}\n\nlet convert = (errors) => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : {...z, [item.path] : item.message}\n    }, {})\n}\n\nexport default DeliveryForm;"]},"metadata":{},"sourceType":"module"}