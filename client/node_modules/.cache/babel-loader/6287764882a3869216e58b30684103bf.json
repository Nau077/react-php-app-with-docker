{"ast":null,"code":"var _jsxFileName = \"/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js\";\nimport React, { useState, useEffect } from 'react';\nimport FormSelect from './delivery_form-select';\nimport FormUpload from './delivery_form-upload';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }));\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nconst useStyles = makeStyles(theme => ({\n  card: {\n    minWidth: 275\n  },\n  button: {\n    color: blue[900],\n    margin: 10\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      minWidth: 240,\n      maxWidth: 450,\n      width: '100%',\n      textField: {\n        flexBasis: 200,\n        textField: {\n          marginLeft: theme.spacing(1),\n          marginRight: theme.spacing(1)\n        }\n      }\n    }\n  }\n}));\n\nfunction DeliveryForm(props) {\n  const [formState, setFormState] = React.useState({\n    data: {\n      rigion: '',\n      waterbase: '',\n      weight: '',\n      adress: '',\n      date: new Date(),\n      upload: ''\n    }\n  }); // const [formErros, setFormErros] = useState({\n  //   erros: {\n  //     rigion: '',\n  //     waterbase: '',\n  //     weight: '',\n  //     adress: '',\n  //     date: new Date(),\n  //     upload: ''\n  //   }\n  // })\n\n  useEffect(() => {\n    formState.rigion = props.rigionValue;\n  }, []);\n\n  const handleChange = prop => event => {\n    setFormState({ ...formState,\n      [prop]: event.target.value\n    });\n  };\n\n  const handleSelectChange = value => {\n    setFormState({ ...formState,\n      waterbase: value\n    });\n  };\n\n  const handleDateChange = prop => {\n    setFormState({ ...formState,\n      date: prop\n    });\n  };\n\n  const handleUploadFile = prop => {\n    setFormState({ ...formState,\n      upload: [prop]\n    });\n  }; // const validationSchema = Yup.object({\n  //   name: Yup.string(\"Enter a name\")\n  //   .required(\"Name is required\"),\n  //   email: Yup.string(\"Enter your email\")\n  //   .email(\"Enter a valid email\")\n  //   .required(\"Email is required\"),\n  //   password: Yup.string(\"\")\n  //   .min(8, \"Password must contain at least 8 characters\")\n  //   .required(\"Enter your password\"),\n  //   confirmPassword: Yup.string(\"Enter your password\")\n  //   .required(\"Confirm your password\")\n  //   .oneOf([Yup.ref(\"password\")], \"Password does not match\")\n  // }) \n\n\n  const submitForm = e => {\n    e.preventDefault();\n  };\n\n  const error = formState.adress !== \"a\";\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(ValidatorForm, {\n    ref: \"form\",\n    onSubmit: this.handleSubmit,\n    onError: errors => console.log(errors),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextValidator, {\n    label: \"Email\",\n    onChange: this.handleChange,\n    name: \"email\",\n    value: formState.weight,\n    validators: ['required', 'isEmail'],\n    errorMessages: ['this field is required', 'email is not valid'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, \"Submit\"));\n}\n\nexport default DeliveryForm;","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js"],"names":["React","useState","useEffect","FormSelect","FormUpload","TextField","makeStyles","InputAdornment","blue","CardContent","Button","Card","NumberFormat","PropTypes","DateFnsUtils","CircularProgress","ValidatorForm","TextValidator","Formik","Form","Field","ErrorMessage","Yup","MuiPickersUtilsProvider","KeyboardDatePicker","NumberFormatCustom","props","inputRef","onChange","other","values","target","value","propTypes","func","isRequired","useStyles","theme","card","minWidth","button","color","margin","root","spacing","maxWidth","width","textField","flexBasis","marginLeft","marginRight","DeliveryForm","formState","setFormState","data","rigion","waterbase","weight","adress","date","Date","upload","rigionValue","handleChange","prop","event","handleSelectChange","handleDateChange","handleUploadFile","submitForm","e","preventDefault","error","classes","handleSubmit","errors","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FormSelect from './delivery_form-select'\nimport FormUpload from './delivery_form-upload'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { ValidatorForm, TextValidator} from 'react-material-ui-form-validator';\n \nimport {\n  Formik, Form, Field, ErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\n\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n  \n    return (\n      <NumberFormat\n        {...other}\n        getInputRef={inputRef}\n        onValueChange={values => {\n          onChange({\n            target: {\n              value: values.value,\n            },\n          });\n        }}\n        isNumericString\n      />\n    );\n  }\n  \n  NumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n  \nconst useStyles = makeStyles((theme) => ({\n    card: {\n      minWidth: 275,\n    },\n    button: {\n      color: blue[900],\n      margin: 10\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        minWidth: 240,\n        maxWidth: 450,\n        width: '100%',\n        textField: {\n            flexBasis: 200,\n            textField: {\n                marginLeft: theme.spacing(1),\n                marginRight: theme.spacing(1),\n              },\n          },\n      },\n    },\n  }));\n\n\n\nfunction DeliveryForm(props) {\n\n    const [formState, setFormState] = React.useState({\n      data: {\n        rigion: '',\n        waterbase: '',\n        weight: '',\n        adress: '',\n        date: new Date(),\n        upload: ''\n      }\n    });\n\n      // const [formErros, setFormErros] = useState({\n      //   erros: {\n      //     rigion: '',\n      //     waterbase: '',\n      //     weight: '',\n      //     adress: '',\n      //     date: new Date(),\n      //     upload: ''\n      //   }\n      // })\n    \n      useEffect(()=> {\n        formState.rigion = props.rigionValue\n      }, [])\n\n    \n      const handleChange = prop => event => {\n        setFormState({\n             ...formState,\n              [prop]: event.target.value \n            });\n      };\n\n      const handleSelectChange = value => {\n        setFormState({\n             ...formState,\n              waterbase: value\n            });\n      };\n\n      const handleDateChange = prop => {\n       \n        setFormState({\n            ...formState,\n             date: prop\n           });\n    };\n\n    const handleUploadFile = prop => {\n        setFormState({\n            ...formState,\n             upload: [prop]\n           });\n    };\n\n    // const validationSchema = Yup.object({\n    //   name: Yup.string(\"Enter a name\")\n    //   .required(\"Name is required\"),\n    //   email: Yup.string(\"Enter your email\")\n    //   .email(\"Enter a valid email\")\n    //   .required(\"Email is required\"),\n    //   password: Yup.string(\"\")\n    //   .min(8, \"Password must contain at least 8 characters\")\n    //   .required(\"Enter your password\"),\n    //   confirmPassword: Yup.string(\"Enter your password\")\n    //   .required(\"Confirm your password\")\n    //   .oneOf([Yup.ref(\"password\")], \"Password does not match\")\n    // }) \n\n    const submitForm = e => {\n      e.preventDefault();\n \n    }\n\n    const error = formState.adress !== \"a\";\n\n    const classes = useStyles();\n\n    return (\n      <ValidatorForm\n      ref=\"form\"\n      onSubmit={this.handleSubmit}\n      onError={errors => console.log(errors)}\n  >\n      <TextValidator\n          label=\"Email\"\n          onChange={this.handleChange}\n          name=\"email\"\n          value={formState.weight}\n          validators={['required', 'isEmail']}\n          errorMessages={['this field is required', 'email is not valid']}\n      />\n      <Button type=\"submit\">Submit</Button>\n  </ValidatorForm>\n    );\n}\n\nexport default DeliveryForm;"]},"metadata":{},"sourceType":"module"}