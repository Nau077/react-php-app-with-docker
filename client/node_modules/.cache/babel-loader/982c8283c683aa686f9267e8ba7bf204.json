{"ast":null,"code":"import { GET_RIGIONS, GET_WATERBASES, FILTER_WATERBASES, ENABLE_LOADING, REQUEST_IN_SUCCESS, REQUEST_IN_FAILURE } from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({\n  rigion,\n  rigions,\n  waterBases\n}) => {\n  let rigionId = '';\n  const isRigionAvailable = rigions.map(el => {\n    const isExist = true;\n\n    if (el.area_names.includes(rigion)) {\n      rigionId = el.uuid;\n      return isExist;\n    }\n\n    return !isExist;\n  });\n\n  if (!isRigionAvailable) {\n    return;\n  }\n\n  return waterBases.filter(el => el.region_uuid == rigionId);\n};\n\nexport const sendFormData = payload => dispatch => {\n  const coolData = {\n    rigion: payload.rigion,\n    waterbase: payload.waterbase,\n    weight: payload.weight,\n    adress: payload.adress,\n    date: payload.date\n  };\n  let formData = new FormData();\n  formData.append('file', payload.upload);\n  formData.append('cool_data', JSON.stringify(coolData));\n  API.post('addData', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }).then(response => {\n    if (response.data.status === '200') {\n      dispatch({\n        type: REQUEST_IN_SUCCESS\n      });\n    }\n  }).catch(error => {\n    console.error(error);\n    dispatch({\n      type: REQUEST_IN_FAILURE\n    });\n  });\n};\nexport const getRigions = () => dispatch => {\n  dispatch({\n    type: ENABLE_LOADING\n  });\n  API.get('rigions').then(response => {\n    const rigions = response.data.data;\n    dispatch({\n      type: GET_RIGIONS,\n      payload: rigions\n    });\n    dispatch({\n      type: REQUEST_IN_SUCCESS\n    });\n  }).catch(e => {\n    console.error(e);\n    dispatch({\n      type: REQUEST_IN_FAILURE\n    });\n  });\n};\nexport const getWaterbases = () => dispatch => {\n  dispatch({\n    type: ENABLE_LOADING\n  });\n  API.get('waterbases').then(response => {\n    const waterbases = response.data.data;\n    dispatch({\n      type: GET_WATERBASES,\n      payload: waterbases\n    });\n    dispatch({\n      type: REQUEST_IN_SUCCESS\n    });\n  }).catch(e => {\n    console.error(e);\n    dispatch({\n      type: REQUEST_IN_FAILURE\n    });\n  });\n};\nexport const filterWaterbases = params => dispatch => {\n  const waterbases = filterWaterBases(params);\n  dispatch({\n    type: FILTER_WATERBASES,\n    payload: waterbases\n  });\n};","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/actions/actions.js"],"names":["GET_RIGIONS","GET_WATERBASES","FILTER_WATERBASES","ENABLE_LOADING","REQUEST_IN_SUCCESS","REQUEST_IN_FAILURE","API","filterWaterBases","rigion","rigions","waterBases","rigionId","isRigionAvailable","map","el","isExist","area_names","includes","uuid","filter","region_uuid","sendFormData","payload","dispatch","coolData","waterbase","weight","adress","date","formData","FormData","append","upload","JSON","stringify","post","headers","then","response","data","status","type","catch","error","console","getRigions","get","e","getWaterbases","waterbases","filterWaterbases","params"],"mappings":"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","sourcesContent":["import { \n    GET_RIGIONS, \n    GET_WATERBASES, \n    FILTER_WATERBASES,\n    ENABLE_LOADING,\n    REQUEST_IN_SUCCESS,\n    REQUEST_IN_FAILURE \n} from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({ rigion, rigions, waterBases }) => {\n    let rigionId = '';\n\n    const isRigionAvailable = rigions.map(el => {\n        const isExist = true;\n\n        if (el.area_names.includes(rigion)) {\n            rigionId = el.uuid;\n            return isExist; \n        }\n        return !isExist;\n    });\n\n    if (!isRigionAvailable) {\n        return;\n    }\n \n    return waterBases.filter(el => el.region_uuid == rigionId);\n};\n \nexport const sendFormData = (payload) => dispatch => {\n \n    const coolData = {\n        rigion: payload.rigion,\n        waterbase: payload.waterbase,\n        weight: payload.weight,\n        adress: payload.adress,\n        date: payload.date,\n    };\n\n    let formData = new FormData();\n\n    formData.append('file', payload.upload);\n    formData.append('cool_data', JSON.stringify(coolData));\n    \n    API.post(\n        'addData',\n        formData,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n                }\n            }\n        )\n        .then((response) => {\n            if (response.data.status === '200') {\n               dispatch({ type: REQUEST_IN_SUCCESS });\n            }\n            \n        })\n        .catch(error => {\n            console.error(error)\n            dispatch({ type: REQUEST_IN_FAILURE })\n        });\n};\n\nexport const getRigions = () => dispatch => {\n    dispatch({ type: ENABLE_LOADING });\n\n    API.get('rigions')\n        .then((response) => {\n            const rigions =  response.data.data;\n            dispatch({ type: GET_RIGIONS, payload: rigions });\n            dispatch({ type: REQUEST_IN_SUCCESS });\n        })\n        .catch(e => {\n            console.error(e)\n            dispatch({ type: REQUEST_IN_FAILURE })\n        })\n};\n\nexport const getWaterbases = () => dispatch => {\n    dispatch({ type: ENABLE_LOADING });\n\n    API.get('waterbases')\n        .then((response) => {\n            const waterbases =  response.data.data;\n            dispatch({ type: GET_WATERBASES, payload: waterbases })\n            dispatch({ type: REQUEST_IN_SUCCESS });\n        })\n        .catch(e => {\n            console.error(e)\n            dispatch({ type: REQUEST_IN_FAILURE })\n        })\n};\n\nexport const filterWaterbases = (params) => dispatch => {\n    \n    const waterbases = filterWaterBases(params);\n \n    dispatch({ type: FILTER_WATERBASES, payload: waterbases });\n \n};\n"]},"metadata":{},"sourceType":"module"}