{"ast":null,"code":"var _jsxFileName = \"/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport FormSelect from './delivery_form-select';\nimport FormUpload from './delivery_form-upload';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Yup from \"yup\";\nconst schema = Yup.object().shape({\n  // rigion: Yup.string(\"Enter a name\")\n  // .required(\"Name is required\"),\n  weight: Yup.string(\"Введите ваш вес\").required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\").min(8, \"Адрес должен состоять минимум из 8 символов\").required(\"Адрес - обязательное поле\")\n}); // import {\n//     MuiPickersUtilsProvider,\n//     KeyboardDatePicker,\n//   } from '@material-ui/pickers';\n\nfunction NumberFormatCustom(props) {\n  const {\n    inputRef,\n    onChange,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(NumberFormat, Object.assign({}, other, {\n    getInputRef: inputRef,\n    onValueChange: values => {\n      onChange({\n        target: {\n          name: values.name,\n          value: values.value\n        }\n      });\n    },\n    isNumericString: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }));\n}\n\nNumberFormatCustom.propTypes = {\n  inputRef: PropTypes.func.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nconst useStyles = makeStyles(theme => ({\n  card: {\n    minWidth: 275\n  },\n  button: {\n    color: blue[900],\n    margin: 10\n  },\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      minWidth: 240,\n      maxWidth: 450,\n      width: '100%',\n      textField: {\n        flexBasis: 200,\n        textField: {\n          marginLeft: theme.spacing(1),\n          marginRight: theme.spacing(1)\n        }\n      }\n    }\n  }\n}));\n\nfunction DeliveryForm(props) {\n  const [formState, setFormState] = React.useState({\n    values: {\n      rigion: '',\n      waterbase: '',\n      weight: '',\n      adress: '',\n      date: new Date(),\n      upload: ''\n    },\n    errors: {}\n  });\n  useEffect(() => {\n    formState.values.rigion = props.rigionValue;\n  }, []);\n\n  const handleChangeForm = async event => {\n    console.log(event);\n    let {\n      target: {\n        type,\n        name,\n        value,\n        selected\n      }\n    } = event;\n    let errors = await schema.validateAt(name, {\n      [name]: value\n    }, {\n      abortEarly: false\n    }).then(_ => ({\n      [name]: null\n    })).catch(convert);\n    setFormState(state => ({\n      values: { ...state.values,\n        [name]: value\n      },\n      errors: { ...state.errors,\n        ...errors\n      }\n    })); // setFormState({\n    //      ...formState,\n    //       [prop]: event.target.value \n    //     });\n    //   validate(prop);\n  };\n\n  const handleWeightChange = name => event => {\n    async function errors() {\n      return await schema.validateAt(name, {\n        [name]: event.target.value\n      }, {\n        abortEarly: false\n      }).then(_ => ({\n        [name]: null\n      })).catch(convert);\n    }\n\n    setFormState(state => ({\n      values: { ...state.values,\n        [name]: event.target.value\n      },\n      errors: { ...state.errors,\n        ...errors()\n      }\n    }));\n  };\n\n  const handleSelectChange = value => {\n    setFormState({ ...formState,\n      waterbase: value\n    });\n  };\n\n  const handleDateChange = prop => {\n    setFormState({ ...formState,\n      date: prop\n    });\n  };\n\n  const handleUploadFile = prop => {\n    setFormState({ ...formState,\n      upload: [prop]\n    });\n  };\n\n  const handleSubmit = callback => {\n    return async function (event) {\n      event.preventDefault();\n      let errors = await schema.validate(formState.values, {\n        abortEarly: false\n      }).then(_ => ({})) // сбрасывает объект ошибок состояния, если ошибок нет\n      .catch(convert);\n      setFormState(state => ({ ...state,\n        errors\n      }));\n\n      if (React.isEmpty(errors)) {\n        callback(formState.values);\n      }\n    };\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.root,\n    autoComplete: \"off\",\n    onSubmit: handleSubmit(form => {\n      console.log(\"Success\", form);\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  }, props.rigionValue ? /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"standard-required1\",\n    label: \"\\u0412\\u0430\\u0448 \\u0440\\u0435\\u0433\\u0438\\u043E\\u043D\",\n    className: classes.textField,\n    value: props.rigionValue,\n    InputProps: {\n      readOnly: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 35\n    }\n  }) : /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"weight\",\n    id: \"standard-required2\",\n    label: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u043C\\u0430\\u0441\\u0441\\u0443 \\u0432\\u043E\\u0434\\u044B \\u0432 \\u0442\\u043E\\u043D\\u043D\\u0430\\u0445\",\n    className: classes.textField,\n    value: formState.values.weight,\n    helperText: formState.errors.weight ? formState.errors.weight : \"\",\n    onChange: handleWeightChange('weight'),\n    error: formState.errors.weight,\n    InputProps: {\n      inputComponent: NumberFormatCustom,\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 35\n        }\n      }, \"T\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    name: \"adress\",\n    label: \"\\u041D\\u0430\\u043F\\u0438\\u0448\\u0438\\u0442\\u0435 \\u0430\\u0434\\u0440\\u0435\\u0441\\u0441\",\n    value: formState.values.adress,\n    onChange: handleChangeForm,\n    fullWidth: true,\n    error: formState.errors.adress,\n    helperText: formState.errors.adress ? formState.errors.adress : \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 14\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    className: classes.button,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }, \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C\")))));\n}\n\nlet convert = errors => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : { ...z,\n      [item.path]: item.message\n    };\n  }, {});\n};\n\nexport default DeliveryForm;","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_form.js"],"names":["React","useState","useEffect","useRef","FormSelect","FormUpload","TextField","makeStyles","InputAdornment","blue","CardContent","Button","Card","NumberFormat","PropTypes","DateFnsUtils","CircularProgress","Yup","schema","object","shape","weight","string","required","adress","min","NumberFormatCustom","props","inputRef","onChange","other","values","target","name","value","propTypes","func","isRequired","useStyles","theme","card","minWidth","button","color","margin","root","spacing","maxWidth","width","textField","flexBasis","marginLeft","marginRight","DeliveryForm","formState","setFormState","rigion","waterbase","date","Date","upload","errors","rigionValue","handleChangeForm","event","console","log","type","selected","validateAt","abortEarly","then","_","catch","convert","state","handleWeightChange","handleSelectChange","handleDateChange","prop","handleUploadFile","handleSubmit","callback","preventDefault","validate","isEmpty","classes","form","readOnly","inputComponent","endAdornment","inner","reduce","z","item","path","message"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport FormSelect from './delivery_form-select'\nimport FormUpload from './delivery_form-upload'\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport blue from \"@material-ui/core/colors/blue\";\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport DateFnsUtils from '@date-io/date-fns';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport * as Yup from \"yup\"\n\nconst schema = Yup.object().shape({\n  // rigion: Yup.string(\"Enter a name\")\n  // .required(\"Name is required\"),\n  weight: Yup.string(\"Введите ваш вес\")\n  .required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\")\n  .min(8, \"Адрес должен состоять минимум из 8 символов\")\n  .required(\"Адрес - обязательное поле\"),\n})\n \n\n\n// import {\n//     MuiPickersUtilsProvider,\n//     KeyboardDatePicker,\n//   } from '@material-ui/pickers';\n\nfunction NumberFormatCustom(props) {\n    const { inputRef, onChange, ...other } = props;\n    return (\n      <NumberFormat\n        {...other}\n        getInputRef={inputRef}\n        onValueChange={values => {\n          onChange({\n            target: {\n              name: values.name,\n              value: values.value,\n            },\n          });\n        }}\n        isNumericString\n      />\n    );\n  }\n  \n  NumberFormatCustom.propTypes = {\n    inputRef: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n  };\n  \nconst useStyles = makeStyles((theme) => ({\n    card: {\n      minWidth: 275,\n    },\n    button: {\n      color: blue[900],\n      margin: 10\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        minWidth: 240,\n        maxWidth: 450,\n        width: '100%',\n        textField: {\n            flexBasis: 200,\n            textField: {\n                marginLeft: theme.spacing(1),\n                marginRight: theme.spacing(1),\n              },\n          },\n      },\n    },\n  }));\n\n\n\nfunction DeliveryForm(props) {\n \n\n    const [formState, setFormState] = React.useState({\n      values: {\n        rigion: '',\n        waterbase: '',\n        weight: '',\n        adress: '',\n        date: new Date(),\n        upload: ''\n      },\n      errors: {}\n    });\n \n      useEffect(()=> {\n        formState.values.rigion = props.rigionValue\n      }, [])\n\n    \n      const handleChangeForm = async (event) => {\n        console.log(event)\n        let {target : {type, name, value, selected } } = event\n\n        let errors = await schema.validateAt(name, {[name] :value}, { abortEarly : false })\n          .then(_ => ({[name]: null}))\n          .catch(convert)\n        \n          setFormState(state => ({\n            values: {...state.values, [name]: value},\n            errors: {...state.errors, ...errors}\n          }))\n        // setFormState({\n        //      ...formState,\n        //       [prop]: event.target.value \n        //     });\n        //   validate(prop);\n      };\n\n      const handleWeightChange = name =>  event => {\n        \n          async function errors() {\n            return  await schema.validateAt(name, {[name] : event.target.value}, { abortEarly : false })\n                    .then(_ => ({[name]: null}))\n                    .catch(convert)\n        } \n \n        setFormState( state => ({\n            values: {...state.values, [name] : event.target.value},\n            errors: {...state.errors, ...errors()}\n          })\n        );\n      };\n\n      const handleSelectChange = value => {\n        setFormState({\n             ...formState,\n              waterbase: value\n            });\n      };\n\n      const handleDateChange = prop => {\n       \n        setFormState({\n            ...formState,\n             date: prop\n           });\n    };\n\n    const handleUploadFile = prop => {\n        setFormState({\n            ...formState,\n             upload: [prop]\n          });\n    };\n\n    const handleSubmit = (callback) => {\n     return async function (event) {\n       event.preventDefault();\n       \n       let errors = await schema.validate(formState.values, {abortEarly : false})\n          .then(_ => ({})) // сбрасывает объект ошибок состояния, если ошибок нет\n          .catch(convert)\n\n      setFormState(state => ({\n        ...state,\n        errors\n      }))\n\n      if (React.isEmpty(errors)) {\n        callback(formState.values)\n      }\n     }\n    }\n \n\n    const classes = useStyles();\n\n    return (\n      <Card className={classes.card}>\n        <CardContent>\n        <div className=\"form-wrapper\">\n        <form className={classes.root} autoComplete=\"off\" onSubmit={handleSubmit(form => {\n          console.log(\"Success\", form)\n        })}>\n             {props.rigionValue ? <TextField \n                required \n                id=\"standard-required1\" \n                label=\"Ваш регион\"\n                className={classes.textField}\n                value={props.rigionValue}\n                InputProps={{\n                    readOnly: true,\n                }}\n             />\n             : <CircularProgress />\n            }\n            {/* <FormSelect handleSelectChange={handleSelectChange} name={formState.waterbase}/> */}\n            <TextField \n                name=\"weight\"\n                id=\"standard-required2\"\n                label=\"Напишите массу воды в тоннах\"\n                className={classes.textField}\n                value={formState.values.weight}\n                helperText={formState.errors.weight ? formState.errors.weight : \"\"}\n                onChange={handleWeightChange('weight')}\n                error={formState.errors.weight}\n                InputProps={{\n                    inputComponent: NumberFormatCustom,\n                    endAdornment: <InputAdornment position=\"end\">T</InputAdornment>,\n                  }}\n             />\n             <TextField\n                name=\"adress\"\n                label=\"Напишите адресс\"\n                value={formState.values.adress}\n                onChange={handleChangeForm}\n                fullWidth\n                error={formState.errors.adress}\n                helperText={formState.errors.adress ? formState.errors.adress : \"\"}\n             />\n             {/* <MuiPickersUtilsProvider utils={DateFnsUtils}>\n             <KeyboardDatePicker\n                disableToolbar\n                required\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Выберите дату\"\n                value={formState.date}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n            />\n            </MuiPickersUtilsProvider>\n            <FormUpload handleUploadFile={handleUploadFile}/> */}\n              <Button variant=\"outlined\" className={classes.button} type=\"submit\">\n                Отправить\n              </Button>\n         </form>\n         </div>\n         </CardContent>\n         </Card>\n    );\n}\n\nlet convert = (errors) => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : {...z, [item.path] : item.message}\n    }, {})\n}\n\nexport default DeliveryForm;"]},"metadata":{},"sourceType":"module"}