{"ast":null,"code":"import * as Yup from \"yup\";\nexport const schema = Yup.object().shape({\n  weight: Yup.string(\"Введите ваш вес\").required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\").min(8, \"Адрес должен состоять минимум из 8 символов\").required(\"Адрес - обязательное поле\"),\n  date: Yup.string(\"Введите дату\").required(\"Дата - обязательное поле\").test(\"Формат\", \"Некорректный формат даты\", function (value) {\n    if (value === \"Invalid Date\") return false;\n    return true;\n  }).nullable(),\n  waterbase: Yup.string(\"Необходимо выбрать водобазу\").required(\"водобаза - обязательное поле\").nullable()\n});\nexport const convert = errors => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : { ...z,\n      [item.path]: item.message\n    };\n  }, {});\n};\nexport const schemaValidate = (name, value) => {\n  return schema.validateAt(name, {\n    [name]: value\n  }, {\n    abortEarly: false\n  }).then(_ => ({\n    [name]: null\n  })).catch(convert);\n};","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/utils/VALIDATIONS.js"],"names":["Yup","schema","object","shape","weight","string","required","adress","min","date","test","value","nullable","waterbase","convert","errors","inner","reduce","z","item","path","message","schemaValidate","name","validateAt","abortEarly","then","_","catch"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACrCC,EAAAA,MAAM,EAAEJ,GAAG,CAACK,MAAJ,CAAW,iBAAX,EACHC,QADG,CACM,yBADN,CAD6B;AAGrCC,EAAAA,MAAM,EAAEP,GAAG,CAACK,MAAJ,CAAW,EAAX,EACHG,GADG,CACC,CADD,EACI,6CADJ,EAEHF,QAFG,CAEM,2BAFN,CAH6B;AAMrCG,EAAAA,IAAI,EAAET,GAAG,CAACK,MAAJ,CAAW,cAAX,EACDC,QADC,CACQ,0BADR,EAEDI,IAFC,CAEI,QAFJ,EAEc,0BAFd,EAGE,UAASC,KAAT,EAAgB;AACZ,QAAIA,KAAK,KAAK,cAAd,EAA8B,OAAO,KAAP;AAC9B,WAAO,IAAP;AACH,GANH,EAODC,QAPC,EAN+B;AAcrCC,EAAAA,SAAS,EAAEb,GAAG,CAACK,MAAJ,CAAW,6BAAX,EACNC,QADM,CACG,8BADH,EAENM,QAFM;AAd0B,CAAnB,CAAf;AAmBP,OAAO,MAAME,OAAO,GAAIC,MAAD,IAAY;AAC/B,SAAOA,MAAM,CAACC,KAAP,CAAaC,MAAb,CAAoB,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACpC,WAAOD,CAAC,CAACC,IAAI,CAACC,IAAN,CAAD,GAAeF,CAAf,GAAmB,EAAE,GAAGA,CAAL;AAAQ,OAACC,IAAI,CAACC,IAAN,GAAcD,IAAI,CAACE;AAA3B,KAA1B;AACH,GAFM,EAEJ,EAFI,CAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOZ,KAAP,KAAiB;AAC3C,SAAOV,MAAM,CAACuB,UAAP,CAAkBD,IAAlB,EAAwB;AAAE,KAACA,IAAD,GAASZ;AAAX,GAAxB,EAA4C;AAAEc,IAAAA,UAAU,EAAG;AAAf,GAA5C,EACFC,IADE,CACGC,CAAC,KAAK;AAAE,KAACJ,IAAD,GAAQ;AAAV,GAAL,CADJ,EAEFK,KAFE,CAEId,OAFJ,CAAP;AAGH,CAJM","sourcesContent":["import * as Yup from \"yup\";\n\nexport const schema = Yup.object().shape({\n    weight: Yup.string(\"Введите ваш вес\")\n        .required(\"Вес - обязательное поле\"),\n    adress: Yup.string(\"\")\n        .min(8, \"Адрес должен состоять минимум из 8 символов\")\n        .required(\"Адрес - обязательное поле\"),\n    date: Yup.string(\"Введите дату\")\n        .required(\"Дата - обязательное поле\")\n        .test(\"Формат\", \"Некорректный формат даты\", \n            function(value) {\n                if (value === \"Invalid Date\") return false;\n                return true;\n            })\n        .nullable(),\n    waterbase: Yup.string(\"Необходимо выбрать водобазу\")\n        .required(\"водобаза - обязательное поле\")\n        .nullable()\n});\n\nexport const convert = (errors) => {\n    return errors.inner.reduce((z, item) => {\n        return z[item.path] ? z : { ...z, [item.path] : item.message };\n    }, {});\n};\n\nexport const schemaValidate = (name, value) => {\n    return schema.validateAt(name, { [name] : value }, { abortEarly : false })\n        .then(_ => ({ [name]: null }))\n        .catch(convert);\n};   "]},"metadata":{},"sourceType":"module"}