{"ast":null,"code":"import { GET_RIGIONS, GET_WATERBASES, FILTER_WATERBASES } from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({\n  rigion,\n  rigions,\n  waterBases\n}) => {\n  let rigionId = '';\n  const isRigionAvailable = rigions.map(el => {\n    const isExist = true;\n\n    if (el.area_names.includes(rigion)) {\n      rigionId = el.uuid;\n      return isExist;\n    }\n\n    return !isExist;\n  });\n\n  if (!isRigionAvailable) {\n    return;\n  }\n\n  return waterBases.filter(el => el.region_uuid == rigionId);\n};\n\nexport const sendFormData = payload => dispatch => {\n  const coolData = {\n    rigion: payload.rigion,\n    waterbase: payload.waterbase,\n    weight: payload.weight,\n    adress: payload.adress,\n    date: payload.date\n  };\n  let formData = new FormData();\n  formData.append('file', payload.upload);\n  formData.append('cool_data', JSON.stringify(coolData));\n  API.post('addData', formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }).then(response => {\n    console.log(response); // const rigions =  response.data.data;\n    // dispatch({ type: GET_RIGIONS, payload: rigions });\n  }).catch(error => console.error(error));\n};\nexport const getRigions = () => dispatch => {\n  API.get('rigions').then(response => {\n    const rigions = response.data.data;\n    dispatch({\n      type: GET_RIGIONS,\n      payload: rigions\n    });\n  });\n};\nexport const getWaterbases = () => dispatch => {\n  API.get('waterbases').then(response => {\n    const waterbases = response.data.data;\n    dispatch({\n      type: GET_WATERBASES,\n      payload: waterbases\n    });\n  });\n};\nexport const filterWaterbases = params => dispatch => {\n  const waterbases = filterWaterBases(params);\n  dispatch({\n    type: FILTER_WATERBASES,\n    payload: waterbases\n  });\n};","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/actions/actions.js"],"names":["GET_RIGIONS","GET_WATERBASES","FILTER_WATERBASES","API","filterWaterBases","rigion","rigions","waterBases","rigionId","isRigionAvailable","map","el","isExist","area_names","includes","uuid","filter","region_uuid","sendFormData","payload","dispatch","coolData","waterbase","weight","adress","date","formData","FormData","append","upload","JSON","stringify","post","headers","then","response","console","log","catch","error","getRigions","get","data","type","getWaterbases","waterbases","filterWaterbases","params"],"mappings":"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","sourcesContent":["import { GET_RIGIONS, GET_WATERBASES, FILTER_WATERBASES } from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({ rigion, rigions, waterBases }) => {\n    let rigionId = '';\n\n    const isRigionAvailable = rigions.map(el => {\n        const isExist = true;\n\n        if (el.area_names.includes(rigion)) {\n            rigionId = el.uuid;\n            return isExist; \n        }\n        return !isExist;\n    });\n\n    if (!isRigionAvailable) {\n        return;\n    }\n \n    return waterBases.filter(el => el.region_uuid == rigionId);\n};\n \nexport const sendFormData = (payload) => dispatch => {\n \n    const coolData = {\n        rigion: payload.rigion,\n        waterbase: payload.waterbase,\n        weight: payload.weight,\n        adress: payload.adress,\n        date: payload.date,\n    };\n\n    let formData = new FormData();\n\n    formData.append('file', payload.upload);\n    formData.append('cool_data', JSON.stringify(coolData));\n\n    API.post(\n        'addData',\n        formData,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }\n         \n         \n    )\n        .then((response) => {\n            console.log(response);\n            // const rigions =  response.data.data;\n            // dispatch({ type: GET_RIGIONS, payload: rigions });\n        }).catch(error => console.error(error));\n};\n\nexport const getRigions = () => dispatch => {\n    API.get('rigions')\n        .then((response) => {\n            const rigions =  response.data.data;\n            dispatch({ type: GET_RIGIONS, payload: rigions });\n        }); \n};\n\nexport const getWaterbases = () => dispatch => {\n    API.get('waterbases')\n        .then((response) => {\n            const waterbases =  response.data.data;\n            dispatch({ type: GET_WATERBASES, payload: waterbases });\n        }); \n};\n\nexport const filterWaterbases = (params) => dispatch => {\n    \n    const waterbases = filterWaterBases(params);\n \n    dispatch({ type: FILTER_WATERBASES, payload: waterbases });\n \n};"]},"metadata":{},"sourceType":"module"}