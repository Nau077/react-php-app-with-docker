{"ast":null,"code":"import { GET_RIGIONS, GET_WATERBASES, FILTER_WATERBASES } from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({\n  rigion,\n  rigions,\n  waterBases\n}) => {\n  let rigionId = '';\n  const isRigionAvailable = rigions.map(el => {\n    const isExist = true;\n\n    if (el.area_names.includes(rigion)) {\n      rigionId = el.uuid;\n      return isExist;\n    }\n\n    return !isExist;\n  });\n\n  if (!isRigionAvailable) {\n    return;\n  }\n\n  return waterBases.filter(el => el.region_uuid == rigionId);\n};\n\nexport const sendFormData = payload => dispatch => {\n  console.log(payload);\n  API.post('addData', payload).then(response => {\n    const rigions = response.data.data;\n    dispatch({\n      type: GET_RIGIONS,\n      payload: rigions\n    });\n  });\n};\nexport const getRigions = () => dispatch => {\n  API.get('rigions').then(response => {\n    const rigions = response.data.data;\n    dispatch({\n      type: GET_RIGIONS,\n      payload: rigions\n    });\n  });\n};\nexport const getWaterbases = () => dispatch => {\n  API.get('waterbases').then(response => {\n    const waterbases = response.data.data;\n    dispatch({\n      type: GET_WATERBASES,\n      payload: waterbases\n    });\n  });\n};\nexport const filterWaterbases = params => dispatch => {\n  const waterbases = filterWaterBases(params);\n  dispatch({\n    type: FILTER_WATERBASES,\n    payload: waterbases\n  });\n};","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/actions/actions.js"],"names":["GET_RIGIONS","GET_WATERBASES","FILTER_WATERBASES","API","filterWaterBases","rigion","rigions","waterBases","rigionId","isRigionAvailable","map","el","isExist","area_names","includes","uuid","filter","region_uuid","sendFormData","payload","dispatch","console","log","post","then","response","data","type","getRigions","get","getWaterbases","waterbases","filterWaterbases","params"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,iBAAtC,QAA+D,oBAA/D;AACA,OAAOC,GAAP,MAAgB,cAAhB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,MAAD;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAD,KAAmC;AACxD,MAAIC,QAAQ,GAAG,EAAf;AAEA,QAAMC,iBAAiB,GAAGH,OAAO,CAACI,GAAR,CAAYC,EAAE,IAAI;AACxC,UAAMC,OAAO,GAAG,IAAhB;;AAEA,QAAID,EAAE,CAACE,UAAH,CAAcC,QAAd,CAAuBT,MAAvB,CAAJ,EAAoC;AACjCG,MAAAA,QAAQ,GAAGG,EAAE,CAACI,IAAd;AACA,aAAOH,OAAP;AACF;;AACD,WAAO,CAACA,OAAR;AACH,GARyB,CAA1B;;AAUA,MAAI,CAACH,iBAAL,EAAwB;AACpB;AACH;;AAED,SAAOF,UAAU,CAACS,MAAX,CAAkBL,EAAE,IAAIA,EAAE,CAACM,WAAH,IAAkBT,QAA1C,CAAP;AACH,CAlBD;;AAoBA,OAAO,MAAMU,YAAY,GAAIC,OAAD,IAAaC,QAAQ,IAAI;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAhB,EAAAA,GAAG,CAACoB,IAAJ,CAAS,SAAT,EAAoBJ,OAApB,EACKK,IADL,CACWC,QAAD,IAAc;AAChB,UAAMnB,OAAO,GAAImB,QAAQ,CAACC,IAAT,CAAcA,IAA/B;AACAN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE3B,WAAR;AAAqBmB,MAAAA,OAAO,EAAEb;AAA9B,KAAD,CAAR;AACH,GAJL;AAKC,CAPE;AASP,OAAO,MAAMsB,UAAU,GAAG,MAAMR,QAAQ,IAAI;AACxCjB,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,SAAR,EACKL,IADL,CACWC,QAAD,IAAc;AAChB,UAAMnB,OAAO,GAAImB,QAAQ,CAACC,IAAT,CAAcA,IAA/B;AACAN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE3B,WAAR;AAAqBmB,MAAAA,OAAO,EAAEb;AAA9B,KAAD,CAAR;AACH,GAJL;AAKC,CANE;AAQP,OAAO,MAAMwB,aAAa,GAAG,MAAMV,QAAQ,IAAI;AAC3CjB,EAAAA,GAAG,CAAC0B,GAAJ,CAAQ,YAAR,EACKL,IADL,CACWC,QAAD,IAAc;AAChB,UAAMM,UAAU,GAAIN,QAAQ,CAACC,IAAT,CAAcA,IAAlC;AACAN,IAAAA,QAAQ,CAAC;AAAEO,MAAAA,IAAI,EAAE1B,cAAR;AAAwBkB,MAAAA,OAAO,EAAEY;AAAjC,KAAD,CAAR;AACH,GAJL;AAKC,CANE;AAQP,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAYb,QAAQ,IAAI;AAE5C,QAAMW,UAAU,GAAG3B,gBAAgB,CAAC6B,MAAD,CAAnC;AAEAb,EAAAA,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEzB,iBAAR;AAA2BiB,IAAAA,OAAO,EAAEY;AAApC,GAAD,CAAR;AAEP,CANE","sourcesContent":["import { GET_RIGIONS, GET_WATERBASES, FILTER_WATERBASES } from './action_constants';\nimport API from \"../utils/API\";\n\nconst filterWaterBases = ({rigion, rigions, waterBases}) => {\n    let rigionId = ''\n\n    const isRigionAvailable = rigions.map(el => {\n        const isExist = true\n\n        if (el.area_names.includes(rigion)) {\n           rigionId = el.uuid\n           return isExist \n        }\n        return !isExist\n    })\n\n    if (!isRigionAvailable) {\n        return\n    }\n \n    return waterBases.filter(el => el.region_uuid == rigionId)\n}\n \nexport const sendFormData = (payload) => dispatch => {\n    console.log(payload)\n    API.post('addData', payload)\n        .then((response) => {\n            const rigions =  response.data.data;\n            dispatch({ type: GET_RIGIONS, payload: rigions });\n        }); \n    }\n\nexport const getRigions = () => dispatch => {\n    API.get('rigions')\n        .then((response) => {\n            const rigions =  response.data.data;\n            dispatch({ type: GET_RIGIONS, payload: rigions });\n        }); \n    }\n\nexport const getWaterbases = () => dispatch => {\n    API.get('waterbases')\n        .then((response) => {\n            const waterbases =  response.data.data;\n            dispatch({ type: GET_WATERBASES, payload: waterbases });\n        }); \n    }\n\nexport const filterWaterbases = (params) => dispatch => {\n    \n            const waterbases = filterWaterBases(params)\n \n            dispatch({ type: FILTER_WATERBASES, payload: waterbases });\n \n    }"]},"metadata":{},"sourceType":"module"}