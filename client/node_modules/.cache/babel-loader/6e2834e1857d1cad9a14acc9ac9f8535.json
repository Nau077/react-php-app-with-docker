{"ast":null,"code":"import * as Yup from \"yup\";\nexport const schema = Yup.object().shape({\n  weight: Yup.string(\"Введите ваш вес\").required(\"Вес - обязательное поле\"),\n  adress: Yup.string(\"\").min(8, \"Адрес должен состоять минимум из 8 символов\").required(\"Адрес - обязательное поле\"),\n  date: Yup.string(\"Введите дату\").required(\"Дата - обязательное поле\").test(\"Формат\", \"Некорректный формат даты\", function (value) {\n    if (value === \"Invalid Date\") return false;\n    return true;\n  }).nullable()\n});\nexport const convert = errors => {\n  return errors.inner.reduce((z, item) => {\n    return z[item.path] ? z : { ...z,\n      [item.path]: item.message\n    };\n  }, {});\n};\nexport const schemaValidate = (name, value) => {\n  schema.validateAt(name, {\n    [name]: value\n  }, {\n    abortEarly: false\n  }).then(_ => ({\n    [name]: null\n  })).catch(convert);\n};","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/utils/VALIDATIONS.js"],"names":["Yup","schema","object","shape","weight","string","required","adress","min","date","test","value","nullable","convert","errors","inner","reduce","z","item","path","message","schemaValidate","name","validateAt","abortEarly","then","_","catch"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,MAAM,GAAGD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACjCC,EAAAA,MAAM,EAAEJ,GAAG,CAACK,MAAJ,CAAW,iBAAX,EACPC,QADO,CACE,yBADF,CADyB;AAGjCC,EAAAA,MAAM,EAAEP,GAAG,CAACK,MAAJ,CAAW,EAAX,EACPG,GADO,CACH,CADG,EACA,6CADA,EAEPF,QAFO,CAEE,2BAFF,CAHyB;AAMjCG,EAAAA,IAAI,EAAET,GAAG,CAACK,MAAJ,CAAW,cAAX,EACLC,QADK,CACI,0BADJ,EAELI,IAFK,CAEA,QAFA,EAEU,0BAFV,EAGJ,UAASC,KAAT,EAAgB;AACd,QAAIA,KAAK,KAAK,cAAd,EAA8B,OAAO,KAAP;AAC9B,WAAO,IAAP;AACD,GANG,EAOLC,QAPK;AAN2B,CAAnB,CAAf;AAgBP,OAAO,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAC/B,SAAOA,MAAM,CAACC,KAAP,CAAaC,MAAb,CAAoB,CAACC,CAAD,EAAIC,IAAJ,KAAa;AACpC,WAAOD,CAAC,CAACC,IAAI,CAACC,IAAN,CAAD,GAAeF,CAAf,GAAmB,EAAC,GAAGA,CAAJ;AAAO,OAACC,IAAI,CAACC,IAAN,GAAcD,IAAI,CAACE;AAA1B,KAA1B;AACC,GAFE,EAEA,EAFA,CAAP;AAGC,CAJE;AAMN,OAAO,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOX,KAAP,KAAiB;AAC5CV,EAAAA,MAAM,CAACsB,UAAP,CAAkBD,IAAlB,EAAwB;AAAC,KAACA,IAAD,GAASX;AAAV,GAAxB,EAA0C;AAAEa,IAAAA,UAAU,EAAG;AAAf,GAA1C,EACqBC,IADrB,CAC0BC,CAAC,KAAK;AAAC,KAACJ,IAAD,GAAQ;AAAT,GAAL,CAD3B,EAEqBK,KAFrB,CAE2Bd,OAF3B;AAGF,CAJM","sourcesContent":["import * as Yup from \"yup\"\n\nexport const schema = Yup.object().shape({\n        weight: Yup.string(\"Введите ваш вес\")\n        .required(\"Вес - обязательное поле\"),\n        adress: Yup.string(\"\")\n        .min(8, \"Адрес должен состоять минимум из 8 символов\")\n        .required(\"Адрес - обязательное поле\"),\n        date: Yup.string(\"Введите дату\")\n        .required(\"Дата - обязательное поле\")\n        .test(\"Формат\", \"Некорректный формат даты\", \n          function(value) {\n            if (value === \"Invalid Date\") return false\n            return true\n          })\n        .nullable()\n      })\n\nexport const convert = (errors) => {\n    return errors.inner.reduce((z, item) => {\n        return z[item.path] ? z : {...z, [item.path] : item.message}\n        }, {})\n    }\n\n export const schemaValidate = (name, value) => {\n    schema.validateAt(name, {[name] : value}, { abortEarly : false })\n                        .then(_ => ({[name]: null}))\n                        .catch(convert)\n }   "]},"metadata":{},"sourceType":"module"}