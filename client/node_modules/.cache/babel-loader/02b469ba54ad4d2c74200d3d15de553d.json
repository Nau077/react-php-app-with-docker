{"ast":null,"code":"var _jsxFileName = \"/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_map.js\";\nimport React, { useState } from 'react';\nimport { YMaps, Map, Placemark } from \"react-yandex-maps\";\n\nfunction DeliveryMap(props) {\n  const [mapData, setMapData] = useState({\n    center: [59.938924, 30.315311],\n    zoom: 8\n  });\n  const [coordinates, setCoordinates] = useState([[55.684758, 37.738521]]);\n  const [YMapState, setYMapState] = useState('');\n\n  const onMapClick = event => {\n    event.stopPropagation();\n    const coords = event.get(\"coords\");\n    setCoordinates([coords]);\n    setMapData({\n      center: coords,\n      zoom: 8\n    });\n    const myGeocoder = YMapState.geocode([coords]);\n    myGeocoder.then(res => {\n      let firstGeoObject = res.geoObjects.get(0);\n      const region = firstGeoObject.getAdministrativeAreas()[0];\n      props.setRigionHandler(region);\n    });\n  };\n\n  const getGeoLocation = ymaps => {\n    setYMapState(ymaps);\n    return ymaps.geolocation.get({\n      provider: \"yandex\",\n      mapStateAutoApply: true\n    }).then(result => ymaps.geocode(result.geoObjects.position).then(res => {\n      let firstGeoObject = res.geoObjects.get(0);\n      const region = firstGeoObject.getAdministrativeAreas()[0];\n      setMapData({\n        center: firstGeoObject.geometry.getCoordinates(),\n        zoom: 8\n      });\n      setCoordinates([firstGeoObject.geometry.getCoordinates()]);\n      props.setRigionHandler(region);\n    }));\n  };\n\n  const handleApiAvaliable = ymaps => {\n    const geolocation = getGeoLocation(ymaps);\n  };\n\n  return /*#__PURE__*/React.createElement(YMaps, {\n    query: {\n      apikey: '45ccaf60-7908-468d-adde-66b6dca72de5'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    onClick: onMapClick,\n    width: \"640\",\n    state: mapData,\n    modules: [\"geolocation\", \"geocode\"],\n    onLoad: ymaps => {\n      handleApiAvaliable(ymaps);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, coordinates.map(coordinate => /*#__PURE__*/React.createElement(Placemark, {\n    geometry: coordinate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 54\n    }\n  }))));\n}\n\nexport default DeliveryMap;","map":{"version":3,"sources":["/home/roman/web/php-docker-api/client/src/components/delivery__modules/delivery_map.js"],"names":["React","useState","YMaps","Map","Placemark","DeliveryMap","props","mapData","setMapData","center","zoom","coordinates","setCoordinates","YMapState","setYMapState","onMapClick","event","stopPropagation","coords","get","myGeocoder","geocode","then","res","firstGeoObject","geoObjects","region","getAdministrativeAreas","setRigionHandler","getGeoLocation","ymaps","geolocation","provider","mapStateAutoApply","result","position","geometry","getCoordinates","handleApiAvaliable","apikey","map","coordinate"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { YMaps, Map, Placemark } from \"react-yandex-maps\";\n\nfunction DeliveryMap(props) {\n\n    const [mapData, setMapData] = useState({\n        center: [59.938924, 30.315311],\n        zoom: 8,\n      })\n      \n    const [coordinates, setCoordinates] = useState([[55.684758, 37.738521]])\n\n    const [YMapState, setYMapState] = useState('')\n\n    const onMapClick = (event) => {\n        event.stopPropagation();\n\n        const coords = event.get(\"coords\")\n        setCoordinates([coords])\n        setMapData({\n            center: coords,\n            zoom: 8,            \n        })\n\n        const myGeocoder = YMapState.geocode([coords]);\n        myGeocoder.then(res => {\n            let firstGeoObject = res.geoObjects.get(0);\n            const region = firstGeoObject.getAdministrativeAreas()[0]\n            props.setRigionHandler(region)\n        });\n        \n    }\n\n    const getGeoLocation = ymaps => {\n\n        setYMapState(ymaps)\n\n        return ymaps.geolocation\n          .get({ provider: \"yandex\", mapStateAutoApply: true })\n          .then(result =>\n            ymaps.geocode(result.geoObjects.position).then(res => {\n              let firstGeoObject = res.geoObjects.get(0);\n\n              \n              const region = firstGeoObject.getAdministrativeAreas()[0]\n \n              setMapData({\n                  center: firstGeoObject.geometry.getCoordinates(),\n                  zoom: 8\n              })\n               setCoordinates([firstGeoObject.geometry.getCoordinates()])\n\n               props.setRigionHandler(region)   \n\n            })\n          );\n      };\n\n    const handleApiAvaliable = ymaps => {\n        const geolocation = getGeoLocation(ymaps);\n      };\n\n    return (\n        <YMaps query={{\n            apikey: '45ccaf60-7908-468d-adde-66b6dca72de5',}}>\n                  <Map\n                  onClick={onMapClick}\n                  width='640'\n                  state={ mapData }\n                  modules={[\"geolocation\", \"geocode\"]}\n                  onLoad={ymaps => {\n                      handleApiAvaliable(ymaps)\n                  }}\n                  >\n                      {coordinates.map(coordinate => <Placemark geometry={coordinate} />)}\n                  </Map>\n              </YMaps>\n    );\n}\n\nexport default DeliveryMap;"]},"metadata":{},"sourceType":"module"}